<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.green.vrink.user.repository.interfaces.UserRepository">

    <select id="requestApproval" resultType="java.lang.Integer">
        insert into apply(user_id, name, number, accepted)
            value (#{userId},#{accountName},#{accountNumber},0)
    </select>

    <insert id="signUp">
        INSERT INTO user
            (email, password, name, nickname, phone, created_at)
        VALUES (#{email}, #{password}, #{name}, #{nickname}, #{phone}, now())
    </insert>

    <select id="checkEmail" resultType="String">
        SELECT email
        FROM user
        WHERE email = #{email};
    </select>
    <select id="findUserNicknameById" resultType="java.lang.String">
        SELECT nickname
        FROM user
        WHERE user_id = #{userId}

    </select>

    <insert id="editorWrite">
        INSERT INTO editor_detail(user_id, profile_image, introduce, thumbnail, content, vrm)
        VALUES (#{userId}, #{profileImage}, #{introduce}, #{thumbnail}, #{content}, #{vrm})
    </insert>

    <select id="findByEditorId" resultType="com.green.vrink.user.dto.EditorDTO">

        SELECT ed.editor_id, ed.user_id, replace(ed.profile_image,"\\",'/') as profile_image,
               ed.introduce, replace(ed.thumbnail,"\\",'/') as thumbnail, ed.content, replace(ed.vrm,"\\",'/') as vrm, u.nickname
        FROM editor_detail ed
        LEFT JOIN user u
        ON u.user_id = ed.user_id
        WHERE ed.editor_id = #{editorId};

    </select>

    <select id="findVrmById" resultType="java.lang.String">
        SELECT vrm
        FROM editor_detail
        WHERE editor_id = #{editorId}
    </select>

      <select id="findEditorList" resultType="com.green.vrink.user.dto.EditorDTO">
          SELECT e.editor_id,
                 profile_image,
                 introduce,
                 nickname,
                 COALESCE(ROUND(avg(r.count / 2), 1), 0.0) as count,
                 e.thumbnail,
                 CASE
                   WHEN round(avg(r.count)) = 1 THEN '☆'
                   WHEN round(avg(r.count)) = 2 THEN '★'
                   WHEN round(avg(r.count)) = 3 THEN '★☆'
                   WHEN round(avg(r.count)) = 4 THEN '★★'
                   WHEN round(avg(r.count)) = 5 THEN '★★☆'
                   WHEN round(avg(r.count)) = 6 THEN '★★★'
                   WHEN round(avg(r.count)) = 7 THEN '★★★☆'
                   WHEN round(avg(r.count)) = 8 THEN '★★★★'
                   WHEN round(avg(r.count)) = 9 THEN '★★★★☆'
                   WHEN round(avg(r.count)) = 10 THEN '★★★★★'
                   ELSE ''
          END AS star
          FROM editor_detail e
              LEFT JOIN user u
          ON e.user_id = u.user_id
              LEFT JOIN review r ON e.editor_id = r.editor_id
          GROUP BY e.editor_id, profile_image, introduce, nickname
          LIMIT #{offset},#{countPerPage}


    </select>
    <select id="getTotal" resultType="java.lang.Integer">
        SELECT count(editor_id)
        FROM editor_detail
    </select>


    <update id="updateByEditorId">
        UPDATE editor_detail
        SET profile_image=#{profileImage},
            introduce=#{introduce},
            thumbnail=#{thumbnail},
            content=#{content},
            vrm=#{vrm}
        WHERE editor_id = #{editorId}
    </update>

    <select id="findByEmail" resultType="com.green.vrink.user.repository.model.User">
        SELECT *
        FROM user AS u
        WHERE u.email = #{email}
    </select>

    <update id="updateNickname">
        UPDATE user
        SET user.nickname = #{nickname}
        WHERE user_id = #{userId}
    </update>

    <update id="updatePassword">
        UPDATE user
        SET user.password = #{password}
        WHERE user_id = #{userId}
    </update>

    <select id="findByUserId" resultType="com.green.vrink.user.repository.model.User">
        SELECT *
        FROM user AS u
        WHERE user_id = #{userId}
    </select>

    <select id="findEditorIdByUserId" resultType="java.lang.Integer">
        SELECT editor_detail.editor_id
        FROM editor_detail
        WHERE user_id = #{userId};
    </select>
    <select id="findUserIdByEditorId" resultType="java.lang.Integer">
        SELECT user_id
        FROM editor_detail
        WHERE editor_id = #{editorId}
    </select>

    <update id="deleteByUserId">
        UPDATE user
        SET enabled_check = 1
        WHERE user_id = #{userId};
    </update>
    <update id="updatePoint">
        UPDATE user
        SET user.point = #{point}
        WHERE user_id = #{userId}
    </update>
    <update id="updateEditorPoint">
        UPDATE user
        SET point = ifnull(point, 0) + #{point}
        WHERE user_id = (SELECT user_id
                         FROM editor_detail
                         WHERE editor_id = #{editorId})

    </update>

    <insert id="insertPrice">
        INSERT INTO price (editor_id, options, price)
        VALUES (#{editorId}, #{options}, #{price})
    </insert>

    <insert id="calculatePoint">
        INSERT INTO calculator (editor_id, cal_price, created_at)
        VALUES (#{userId}, #{point}, now());
    </insert>

    <select id="findPriceByEditorId" resultType="com.green.vrink.user.dto.EditorPriceDTO">
        SELECT *
        FROM price
        WHERE editor_id = #{editorId}
    </select>

    <select id="findUserByNickname" resultType="java.lang.Integer">
        SELECT count(user.user_id)
        FROM user
        WHERE user.nickname = #{nickname}
    </select>

    <select id="findEmailByNicknameAndPhone" resultType="java.lang.String">
        SELECT user.email
        FROM user
        WHERE user.nickname = #{nickname}
          AND user.phone = #{phone}
    </select>
    <select id="findRequestListByCriAndEditorId" resultType="com.green.vrink.user.dto.RequestListDTO">
        SELECT
        p.payment_id,
        p.name,
        u.nickname,
        DATE_FORMAT(p.created_at, '%Y-%m-%d') AS created_at,
        (CASE
        WHEN ps.state = 'payment_done' THEN '진행중'
        WHEN ps.state = 'c_cancel' THEN '의뢰자 결제 취소'
        WHEN ps.state = 'e_cancel' THEN '작가 결제 취소'
        ELSE '거래 완료'
        END) AS state
        FROM payment_state ps
        LEFT JOIN payment p ON ps.payment_id = p.payment_id
        LEFT JOIN user u ON p.user_id = u.user_id
        JOIN (
        SELECT payment_id, MAX(created_at) AS max_created_at
        FROM payment_state
        GROUP BY payment_id
        ) AS ps_max ON ps.payment_id = ps_max.payment_id AND ps.created_at = ps_max.max_created_at
        WHERE editor_id = #{editorId}
        <if test="cri.keyword == null">
            <choose>
                <when test="cri.filter == 'ing'">
                    AND ps.state = 'payment_done'
                </when>
                <when test="cri.filter == 'done'">
                    AND (ps.state = 'trade_done' OR ps.state = 'e_cancel' OR ps.state = 'c_cancel')
                </when>
            </choose>
        </if>
        <if test="cri.keyword != null">
            <choose>
                <when test="cri.filter == 'ing'">
                    AND (ps.state = 'payment_done' AND (
                    u.nickname LIKE CONCAT('%', #{cri.keyword}, '%') OR
                    p.name LIKE CONCAT('%', #{cri.keyword}, '%')))
                </when>
                <when test="cri.filter == 'done'">
                    AND ((ps.state = 'trade_done' OR ps.state = 'e_cancel' OR ps.state = 'c_cancel') AND (
                    u.nickname LIKE CONCAT('%', #{cri.keyword}, '%') OR
                    p.name LIKE CONCAT('%', #{cri.keyword}, '%')))
                </when>
                <otherwise>
                    AND (u.nickname LIKE CONCAT('%', #{cri.keyword}, '%') OR
                    p.name LIKE CONCAT('%', #{cri.keyword}, '%'))
                </otherwise>
            </choose>
        </if>

        LIMIT #{cri.offset}, #{cri.countPerPage}
    </select>
    <select id="findRequestListTotalByCriAndEditorId" resultType="java.lang.Integer">
        SELECT COUNT(p.payment_id)
        FROM payment_state ps
        LEFT JOIN payment p ON ps.payment_id = p.payment_id
        LEFT JOIN user u ON p.user_id = u.user_id
        JOIN (
        SELECT payment_id, MAX(created_at) AS max_created_at
        FROM payment_state
        GROUP BY payment_id
        ) AS ps_max ON ps.payment_id = ps_max.payment_id AND ps.created_at = ps_max.max_created_at
        WHERE editor_id = #{editorId}
        <if test="cri.keyword == null">
            <choose>
                <when test="cri.filter == 'ing'">
                    AND ps.state = 'payment_done'
                </when>
                <when test="cri.filter == 'done'">
                    AND (ps.state = 'trade_done' OR ps.state = 'e_cancel' OR ps.state = 'c_cancel')
                </when>
            </choose>
        </if>
        <if test="cri.keyword != null">
            <choose>
                <when test="cri.filter == 'ing'">
                    AND (ps.state = 'payment_done' AND (
                    u.nickname LIKE CONCAT('%', #{cri.keyword}, '%') OR
                    p.name LIKE CONCAT('%', #{cri.keyword}, '%')))
                </when>
                <when test="cri.filter == 'done'">
                    AND ((ps.state = 'trade_done' OR ps.state = 'e_cancel' OR ps.state = 'c_cancel') AND (
                    u.nickname LIKE CONCAT('%', #{cri.keyword}, '%') OR
                    p.name LIKE CONCAT('%', #{cri.keyword}, '%')))
                </when>
                <otherwise>
                    AND (u.nickname LIKE CONCAT('%', #{cri.keyword}, '%') OR
                    p.name LIKE CONCAT('%', #{cri.keyword}, '%'))
                </otherwise>
            </choose>
        </if>
    </select>

    <select id="findPasswordByEmailAndName" resultType="java.lang.Integer">
        SELECT user.user_id FROM user WHERE user.email = #{email} AND user.name = #{name}
    </select>

    <select id="findUserIdByEmail" resultType="java.lang.Integer">
        SELECT user_id FROM user WHERE user.email = #{email}
    </select>

    <delete id="deletePriceByEditorId">
        DELETE
        FROM price
        WHERE editor_id = #{editorId}
    </delete>
</mapper>