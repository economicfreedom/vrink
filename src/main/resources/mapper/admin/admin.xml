<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.green.vrink.admin.repository.interfaces.AdminRepository">

    <update id="changeApply">
        UPDATE apply
        SET accepted = #{accepted}
        WHERE apply_id = #{applyId}
    </update>

    <update id="changeCheater">
        UPDATE apply
        SET cheater = #{content}
        WHERE apply_id = #{applyId}
    </update>

    <select id="getAllAdminApplyList" resultType="com.green.vrink.admin.dto.AdminApplyDto">
        SELECT apply.*, user.nickname
        FROM apply
        INNER JOIN user ON apply.user_id = user.user_id
    </select>

    <select id="getAllAdminApplyListByPaging" parameterType="com.green.vrink.admin.dto.PagingDto" resultType="com.green.vrink.admin.dto.AdminApplyDto">
        SELECT apply.*, user.nickname
        FROM apply
        INNER JOIN user ON apply.user_id = user.user_id
        ORDER BY apply.apply_id DESC
        LIMIT #{offset}, #{recordSize}
    </select>

    <select id="getAllAdminApplyListByTypePaging" parameterType="com.green.vrink.admin.dto.PagingDto" resultType="com.green.vrink.admin.dto.AdminApplyDto">
        SELECT apply.*, user.nickname
        FROM apply
        INNER JOIN user ON apply.user_id = user.user_id
        WHERE apply.accepted = #{classification}
        ORDER BY apply.apply_id DESC
        LIMIT #{offset}, #{recordSize}
    </select>

    <select id="getAllAdminApplyListByType" parameterType="com.green.vrink.admin.dto.PagingDto" resultType="com.green.vrink.admin.dto.AdminApplyDto">
        SELECT apply.*, user.nickname
        FROM apply
        INNER JOIN user ON apply.user_id = user.user_id
        WHERE apply.accepted = #{classification}
        ORDER BY apply.apply_id DESC
    </select>

    <select id="countAllAdminApply" resultType="integer">
        SELECT count(*)
        FROM apply
    </select>

    <select id="countAdminApplyByType" resultType="integer">
        SELECT count(*)
        FROM apply
        WHERE accepted = #{classification}
    </select>

    <select id="countAllFreeboard" resultType="integer">
        SELECT count(*)
        FROM community
    </select>

    <select id="getFreeboardById" resultType="com.green.vrink.community.dto.FreeBoardDTO">
        SELECT c.community_id, c.user_id, title, c.content, c.created_at, nickname, count(cr.community_id )AS count
        FROM community c
        LEFT JOIN user u ON c.user_id = u.user_id
        LEFT JOIN community_reply cr ON c.community_id = cr.community_id
        WHERE c.community_id = #{id}
        GROUP BY c.community_id, c.user_id, title, c.content, c.created_at, nickname
        ORDER BY community_id DESC
    </select>

    <select id="getAllFreeboardList" resultType="com.green.vrink.community.dto.FreeBoardDTO">
        SELECT c.community_id, c.user_id, title, c.content, c.created_at, nickname, count(cr.community_id )AS count
        FROM community c
        LEFT JOIN user u ON c.user_id = u.user_id
        LEFT JOIN community_reply cr ON c.community_id = cr.community_id
        GROUP BY c.community_id, c.user_id, title, c.content, c.created_at, nickname
        ORDER BY community_id DESC
    </select>

    <select id="getAllFreeboardListByPaging" resultType="com.green.vrink.community.dto.FreeBoardDTO">
        SELECT c.community_id, c.user_id, title, c.content, c.created_at, nickname, count(cr.community_id )AS count
        FROM community c
        LEFT JOIN user u ON c.user_id = u.user_id
        LEFT JOIN community_reply cr ON c.community_id = cr.community_id
        GROUP BY c.community_id, c.user_id, title, c.content, c.created_at, nickname
        ORDER BY community_id DESC
        LIMIT #{offset}, #{recordSize}
    </select>

<!--    <if test="type == 'nickname'">-->
<!--        WHERE nickname LIKE CONCAT('%',#{keyword},'%')-->
<!--    </if>-->


    <select id="getAllQuestion" resultType="com.green.vrink.qna.dto.QuestionDTO">
        SELECT q_id, q.user_id, content, q.created_at, type, title, q.email, u.nickname, q.status
        FROM question q
        LEFT JOIN user u ON q.user_id = u.user_id
        WHERE (status = #{classification2} OR #{classification2} NOT IN (0, 1))
    </select>

    <select id="getAllQuestionPaging" parameterType="com.green.vrink.admin.dto.PagingDto" resultType="com.green.vrink.qna.dto.QuestionDTO">
        SELECT q_id, q.user_id, content, q.created_at, type, title, q.email, u.nickname, q.status
        FROM question q
        LEFT JOIN user u ON q.user_id = u.user_id
        WHERE (status = #{classification2} OR #{classification2} NOT IN (0, 1))
        ORDER BY q_id DESC
        LIMIT #{offset}, #{recordSize}
    </select>

    <select id="getAllQuestionByTypePaging" parameterType="com.green.vrink.admin.dto.PagingDto" resultType="com.green.vrink.qna.dto.QuestionDTO">
        SELECT q_id, q.user_id, content, q.created_at, type, title, q.email, u.nickname, q.status
        FROM question q
        LEFT JOIN user u ON q.user_id = u.user_id
        WHERE (type = #{classification})
        AND (status = #{classification2} OR #{classification2} NOT IN (0, 1))
        ORDER BY q_id DESC
        LIMIT #{offset}, #{recordSize}
    </select>

    <select id="getAllQuestionByType" resultType="com.green.vrink.qna.dto.QuestionDTO">
        SELECT q_id, q.user_id, content, q.created_at, type, title, q.email, u.nickname, q.status
        FROM question q
        LEFT JOIN user u ON q.user_id = u.user_id
        WHERE (type = #{classification})
        AND (status = #{classification2} OR #{classification2} NOT IN (0, 1))
        ORDER BY q_id DESC
    </select>

    <select id="questionTotalCount" resultType="int">
        SELECT count(*)
        FROM question
        WHERE (status = #{classification2} OR #{classification2} NOT IN (0, 1))
    </select>

    <select id="questionTotalCountClassification" resultType="int">
        SELECT count(*)
        FROM question
        WHERE (type = #{classification})
        AND (status = #{classification2} OR #{classification2} NOT IN (0, 1))
    </select>

    <select id="getQuestionById" resultType="com.green.vrink.qna.dto.QuestionDTO">
        SELECT q_id, q.user_id, content, q.created_at, type, title, q.email, u.nickname, q.status
        FROM question q
        LEFT JOIN user u ON q.user_id = u.user_id
        WHERE q_id = #{id}
    </select>



    <select id="getAllUser" resultType="com.green.vrink.user.repository.model.User">
        SELECT * FROM user
        WHERE (enabled_check = #{classification2} OR #{classification2} NOT IN (0, 1))
        AND (level = #{classification3} OR #{classification3} NOT IN (0, 1))
    </select>

    <select id="getAllUserPaging" parameterType="com.green.vrink.admin.dto.PagingDto" resultType="com.green.vrink.user.repository.model.User">
        SELECT *
        FROM user
        WHERE (enabled_check = #{classification2} OR #{classification2} NOT IN (0, 1))
        AND (level = #{classification3} OR #{classification3} NOT IN (0, 1))
        ORDER BY user_id DESC
        LIMIT #{offset}, #{recordSize}
    </select>

    <select id="getAllUserByTypePaging" parameterType="com.green.vrink.admin.dto.PagingDto" resultType="com.green.vrink.user.repository.model.User">
        SELECT *
        FROM user
        WHERE (editor = #{classification})
        AND (enabled_check = #{classification2} OR #{classification2} NOT IN (0, 1))
        AND (level = #{classification3} OR #{classification3} NOT IN (0, 1))
        ORDER BY user_id DESC
        LIMIT #{offset}, #{recordSize}
    </select>

    <select id="getAllUserByType" resultType="com.green.vrink.user.repository.model.User">
        SELECT *
        FROM user
        WHERE (editor = #{classification})
        AND (enabled_check = #{classification2} OR #{classification2} NOT IN (0, 1))
        AND (level = #{classification3} OR #{classification3} NOT IN (0, 1))
        ORDER BY user_id DESC
    </select>

    <select id="userTotalCount" resultType="int">
        SELECT count(*) FROM user
        WHERE (enabled_check = #{classification2} OR #{classification2} NOT IN (0, 1))
        AND (level = #{classification3} OR #{classification3} NOT IN (0, 1))
    </select>

    <select id="userTotalCountClassification" resultType="int">
        SELECT count(*) FROM user
        WHERE (editor = #{classification})
        AND (enabled_check = #{classification2} OR #{classification2} NOT IN (0, 1))
        AND (level = #{classification3} OR #{classification3} NOT IN (0, 1))
    </select>

    <select id="getUserById" resultType="com.green.vrink.user.repository.model.User">
        SELECT * from user
        WHERE user_id = #{id}
    </select>

    <select id="getAllAdList" resultType="com.green.vrink.admin.dto.AdminAdDto">
        SELECT *
        FROM ad
    </select>

    <select id="getAllAdListByType" resultType="com.green.vrink.admin.dto.AdminAdDto">
        SELECT *
        FROM ad
        WHERE status = #{classification}
        ORDER BY ad_id DESC
    </select>

    <select id="getAllAdListByPaging" resultType="com.green.vrink.admin.dto.AdminAdDto">
        SELECT *
        FROM ad
        ORDER BY ad_id DESC
        LIMIT #{offset}, #{recordSize}
    </select>

    <select id="getAllAdListByTypePaging" resultType="com.green.vrink.admin.dto.AdminAdDto">
        SELECT *
        FROM ad
        WHERE status = #{classification}
        ORDER BY ad_id DESC
        LIMIT #{offset}, #{recordSize}
    </select>

    <select id="countAllAd" resultType="integer">
        SELECT count(*)
        FROM ad
    </select>

    <select id="countAdByType" resultType="integer">
        SELECT count(*)
        FROM ad
        WHERE status = #{classification}
    </select>

    <update id="changeAd">
        UPDATE ad
        SET status = #{status}
        WHERE ad_id = #{adId}
    </update>

    <update id="changeAdPeriod">
        UPDATE ad
        SET ad_period = #{adPeriod}
        WHERE ad_id = #{adId}
    </update>

    <select id="getAdById" resultType="com.green.vrink.admin.dto.AdminAdDto">
        SELECT * from ad
        WHERE ad_id = #{id}
    </select>

    <update id="updateUserLevelById">
        UPDATE user
        SET level = #{level}
        WHERE user_id = #{userId}
    </update>

    <update id="updateUserEnabledCheckById">
        UPDATE user
        SET enabled_Check = #{enabledCheck}
        WHERE user_id = #{userId}
    </update>

    <update id="updateUserEditorById">
        UPDATE user
        SET editor = 'editor', editor_created_at = now()
        WHERE user_id = #{userId}
    </update>

    <insert id="insertEditorDetailByUserId">
        INSERT INTO editor_detail(user_id, image)
        VALUES(#{userId}, '/images/resource/default_image.gif')
    </insert>

    <select id="countEditorDetailByUserId" resultType="integer">
        SELECT count(*)
        FROM editor_detail
        WHERE user_id = #{userId}
    </select>

    <select id="getDateCountSevenDaysByTableName" resultType="com.green.vrink.admin.dto.DateCountDto">
        WITH DateRange AS (
            SELECT (CURDATE() - INTERVAL 6 DAY) + INTERVAL n DAY AS date
        FROM (
            SELECT 0 AS n UNION ALL
            SELECT 1 UNION ALL
            SELECT 2 UNION ALL
            SELECT 3 UNION ALL
            SELECT 4 UNION ALL
            SELECT 5 UNION ALL
            SELECT 6
            ) AS Numbers
            )

        SELECT DATE_FORMAT(DateRange.date, '%m-%d') AS date, IFNULL(count, 0) AS count
        FROM DateRange
            LEFT JOIN (
            SELECT DATE(created_at) AS date, COUNT(*) AS count
            FROM ${tableName}
            WHERE created_at >= CURDATE() - INTERVAL 7 DAY
            GROUP BY DATE(created_at)
            ) AS Data
        ON DATE(DateRange.date) = Data.date;
    </select>

    <select id="getDateCountMonthByTableName" resultType="com.green.vrink.admin.dto.DateCountDto">
        <![CDATA[
        WITH RECURSIVE DateRange AS (
        SELECT
        DATE_ADD(LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 11 MONTH)), INTERVAL 1 DAY) AS start_date,
        LAST_DAY(CURDATE()) AS end_date
        UNION ALL
        SELECT
        DATE_ADD(start_date, INTERVAL 1 MONTH) AS start_date,
        LAST_DAY(DATE_ADD(start_date, INTERVAL 1 MONTH)) AS end_date
        FROM DateRange
        WHERE start_date < LAST_DAY(CURDATE())
        )

        SELECT
        DATE_FORMAT(start_date, '%Y-%m') AS date,
        IFNULL(SUM(count), 0) AS count
        FROM DateRange
        LEFT JOIN (
        SELECT DATE_FORMAT(created_at, '%Y-%m') AS date, COUNT(*) AS count
        FROM ${tableName}
        WHERE created_at >= DATE_ADD(LAST_DAY(CURDATE()), INTERVAL 1 DAY) - INTERVAL 12 MONTH
        AND created_at < DATE_ADD(LAST_DAY(CURDATE()), INTERVAL 1 DAY)
        GROUP BY DATE_FORMAT(created_at, '%Y-%m')
        ) AS Data
        ON DATE_FORMAT(start_date, '%Y-%m') = Data.date
        GROUP BY DATE_FORMAT(start_date, '%Y-%m')
        ]]>
    </select>

    <select id="getDateCountWeekByTableName" resultType="com.green.vrink.admin.dto.DateCountDto">
        <![CDATA[
        WITH Weeks AS (
            SELECT 0 AS week
            UNION SELECT 1
            UNION SELECT 2
            UNION SELECT 3
            UNION SELECT 4
            UNION SELECT 5
            UNION SELECT 6
            UNION SELECT 7
            UNION SELECT 8
            UNION SELECT 9
            UNION SELECT 10
            UNION SELECT 11
        )

        SELECT
            DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL week WEEK), '%m-%d') AS date,
    IFNULL(SUM(IFNULL(count, 0)), 0) AS count
        FROM Weeks
            LEFT JOIN (
            SELECT DATE_FORMAT(created_at, '%Y-%u') AS date, COUNT(*) AS count
            FROM ${tableName}
            WHERE created_at >= DATE_SUB(CURDATE(), INTERVAL 11 WEEK)
            AND created_at <= CURDATE()
            GROUP BY DATE_FORMAT(created_at, '%Y-%u')
            ) AS Data
        ON DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL week WEEK), '%Y-%u') = Data.date
        GROUP BY DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL week WEEK), '%m-%d')
        ORDER BY DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL week WEEK), '%m-%d');
        ]]>
    </select>


    <select id="getEditorDateCountSevenDays" resultType="com.green.vrink.admin.dto.DateCountDto">
        WITH DateRange AS (
            SELECT (CURDATE() - INTERVAL 6 DAY) + INTERVAL n DAY AS date
        FROM (
            SELECT 0 AS n UNION ALL
            SELECT 1 UNION ALL
            SELECT 2 UNION ALL
            SELECT 3 UNION ALL
            SELECT 4 UNION ALL
            SELECT 5 UNION ALL
            SELECT 6
            ) AS Numbers
            )

        SELECT DATE_FORMAT(DateRange.date, '%m-%d') AS date, IFNULL(count, 0) AS count
        FROM DateRange
            LEFT JOIN (
            SELECT DATE(editor_created_at) AS date, COUNT(*) AS count
            FROM user
            WHERE editor_created_at >= CURDATE() - INTERVAL 7 DAY
            GROUP BY DATE(editor_created_at)
            ) AS Data
        ON DATE(DateRange.date) = Data.date;
    </select>

    <select id="getEditorDateCountMonth" resultType="com.green.vrink.admin.dto.DateCountDto">
        <![CDATA[
        WITH RECURSIVE DateRange AS (
            SELECT
                DATE_ADD(LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 11 MONTH)), INTERVAL 1 DAY) AS start_date,
                LAST_DAY(CURDATE()) AS end_date
            UNION ALL
            SELECT
                DATE_ADD(start_date, INTERVAL 1 MONTH) AS start_date,
                LAST_DAY(DATE_ADD(start_date, INTERVAL 1 MONTH)) AS end_date
            FROM DateRange
            WHERE start_date < LAST_DAY(CURDATE())
        )

        SELECT
            DATE_FORMAT(start_date, '%Y-%m') AS date,
        IFNULL(SUM(count), 0) AS count
        FROM DateRange
            LEFT JOIN (
            SELECT DATE_FORMAT(editor_created_at, '%Y-%m') AS date, COUNT(*) AS count
            FROM user
            WHERE editor_created_at >= DATE_ADD(LAST_DAY(CURDATE()), INTERVAL 1 DAY) - INTERVAL 12 MONTH
            AND editor_created_at < DATE_ADD(LAST_DAY(CURDATE()), INTERVAL 1 DAY)
            GROUP BY DATE_FORMAT(editor_created_at, '%Y-%m')
            ) AS Data
        ON DATE_FORMAT(start_date, '%Y-%m') = Data.date
        GROUP BY DATE_FORMAT(start_date, '%Y-%m')
        ]]>
    </select>

    <select id="getEditorDateCountWeek" resultType="com.green.vrink.admin.dto.DateCountDto">
        <![CDATA[
        WITH Weeks AS (
            SELECT 0 AS week
            UNION SELECT 1
            UNION SELECT 2
            UNION SELECT 3
            UNION SELECT 4
            UNION SELECT 5
            UNION SELECT 6
            UNION SELECT 7
            UNION SELECT 8
            UNION SELECT 9
            UNION SELECT 10
            UNION SELECT 11
        )

        SELECT
            DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL week WEEK), '%m-%d') AS date,
    IFNULL(SUM(IFNULL(count, 0)), 0) AS count
        FROM Weeks
            LEFT JOIN (
            SELECT DATE_FORMAT(editor_created_at, '%Y-%u') AS date, COUNT(*) AS count
            FROM user
            WHERE editor_created_at >= DATE_SUB(CURDATE(), INTERVAL 11 WEEK)
            AND editor_created_at <= CURDATE()
            GROUP BY DATE_FORMAT(editor_created_at, '%Y-%u')
            ) AS Data
        ON DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL week WEEK), '%Y-%u') = Data.date
        GROUP BY DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL week WEEK), '%m-%d')
        ORDER BY DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL week WEEK), '%m-%d');
        ]]>
    </select>

    <select id="countStandardUser" resultType="integer">
        SELECT count(*)
        FROM user
        WHERE editor = 'standard' AND enabled_check = 0
    </select>

    <select id="countEditorUser" resultType="integer">
        SELECT count(*)
        FROM user
        WHERE editor = 'editor' AND enabled_check = 0
    </select>

    <select id="countEnabledUser" resultType="integer">
        SELECT count(*)
        FROM user
        WHERE enabled_check = 1
    </select>

</mapper>