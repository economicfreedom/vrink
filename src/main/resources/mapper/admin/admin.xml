<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.green.vrink.admin.repository.interfaces.AdminRepository">

    <update id="changeApply">
        UPDATE apply
        SET accepted = #{accepted}
        WHERE apply_id = #{applyId}
    </update>

    <update id="changeCheater">
        UPDATE apply
        SET cheater = #{content}
        WHERE apply_id = #{applyId}
    </update>

    <select id="getAllAdminApplyList" resultType="com.green.vrink.admin.dto.AdminApplyDto">
        SELECT apply.*, user.nickname
        FROM apply
        INNER JOIN user ON apply.user_id = user.user_id
    </select>

    <select id="getAllAdminApplyListByPaging" parameterType="com.green.vrink.admin.dto.PagingDto"
            resultType="com.green.vrink.admin.dto.AdminApplyDto">
        SELECT apply.*, user.nickname
        FROM apply
        INNER JOIN user ON apply.user_id = user.user_id
        ORDER BY apply.apply_id DESC
            LIMIT #{offset}, #{recordSize}
    </select>

    <select id="getAllAdminApplyListByTypePaging" parameterType="com.green.vrink.admin.dto.PagingDto"
            resultType="com.green.vrink.admin.dto.AdminApplyDto">
        SELECT apply.*, user.nickname
        FROM apply
        INNER JOIN user ON apply.user_id = user.user_id
        WHERE apply.accepted = #{classification}
        ORDER BY apply.apply_id DESC
            LIMIT #{offset}, #{recordSize}
    </select>

    <select id="getAllAdminApplyListByType" parameterType="com.green.vrink.admin.dto.PagingDto"
            resultType="com.green.vrink.admin.dto.AdminApplyDto">
        SELECT apply.*, user.nickname
        FROM apply
        INNER JOIN user ON apply.user_id = user.user_id
        WHERE apply.accepted = #{classification}
        ORDER BY apply.apply_id DESC
    </select>

    <select id="countAllAdminApply" resultType="integer">
        SELECT count(*)
        FROM apply
    </select>

    <select id="countAdminApplyByType" resultType="integer">
        SELECT count(*)
        FROM apply
        WHERE accepted = #{classification}
    </select>

    <select id="countAllFreeboard" resultType="integer">
        SELECT count(*)
        FROM community
    </select>

    <select id="getFreeboardById" resultType="com.green.vrink.community.dto.FreeBoardDTO">
        SELECT c.community_id, c.user_id, title, c.content, c.created_at, nickname, count(cr.community_id)AS count
        FROM community c
            LEFT JOIN user u
        ON c.user_id = u.user_id
            LEFT JOIN community_reply cr ON c.community_id = cr.community_id
        WHERE c.community_id = #{id}
        GROUP BY c.community_id, c.user_id, title, c.content, c.created_at, nickname
        ORDER BY community_id DESC
    </select>

    <select id="getAllFreeboardList" resultType="com.green.vrink.community.dto.FreeBoardDTO">
        SELECT c.community_id, c.user_id, title, c.content, c.created_at, nickname, count(cr.community_id)AS count
        FROM community c
            LEFT JOIN user u
        ON c.user_id = u.user_id
            LEFT JOIN community_reply cr ON c.community_id = cr.community_id
        GROUP BY c.community_id, c.user_id, title, c.content, c.created_at, nickname
        ORDER BY community_id DESC
    </select>

    <select id="getAllFreeboardListByPaging" resultType="com.green.vrink.community.dto.FreeBoardDTO">
        SELECT c.community_id, c.user_id, title, c.content, c.created_at, nickname, count(cr.community_id)AS count
        FROM community c
            LEFT JOIN user u
        ON c.user_id = u.user_id
            LEFT JOIN community_reply cr ON c.community_id = cr.community_id
        GROUP BY c.community_id, c.user_id, title, c.content, c.created_at, nickname
        ORDER BY community_id DESC
            LIMIT #{offset}, #{recordSize}
    </select>

    <select id="countAllSuggest" resultType="integer">
        SELECT count(*)
        FROM suggest
        WHERE (state = #{classification} OR #{classification} NOT IN (0, 1))
    </select>

    <select id="getSuggestById" resultType="com.green.vrink.suggest.dto.AdminSuggestDto">
        SELECT s.suggest_id, s.user_id, title, s.content, s.created_at, s.state, nickname, count(sr.suggest_id)AS count
        FROM suggest s
            LEFT JOIN user u
        ON s.user_id = u.user_id
            LEFT JOIN suggest_reply sr ON s.suggest_id = sr.suggest_id
        WHERE s.suggest_id = #{id}
        GROUP BY s.suggest_id, s.user_id, title, s.content, s.created_at, nickname
        ORDER BY suggest_id DESC
    </select>

    <select id="getAllSuggestList" resultType="com.green.vrink.suggest.dto.AdminSuggestDto">
        SELECT s.suggest_id, s.user_id, title, s.content, s.created_at, s.state, nickname, count(sr.suggest_id)AS count
        FROM suggest s
            LEFT JOIN user u
        ON s.user_id = u.user_id
            LEFT JOIN suggest_reply sr ON s.suggest_id = sr.suggest_id
        WHERE (s.state = #{classification} OR #{classification} NOT IN (0, 1))
        GROUP BY s.suggest_id, s.user_id, title, s.content, s.created_at, nickname
        ORDER BY suggest_id DESC
    </select>

    <select id="getAllSuggestListByPaging" resultType="com.green.vrink.suggest.dto.AdminSuggestDto">
        SELECT s.suggest_id, s.user_id, title, s.content, s.created_at, s.state, nickname, count(sr.suggest_id)AS count
        FROM suggest s
            LEFT JOIN user u
        ON s.user_id = u.user_id
            LEFT JOIN suggest_reply sr ON s.suggest_id = sr.suggest_id
        WHERE (s.state = #{classification} OR #{classification} NOT IN (0, 1))
        GROUP BY s.suggest_id, s.user_id, title, s.content, s.created_at, nickname
        ORDER BY suggest_id DESC
            LIMIT #{offset}, #{recordSize}
    </select>

    <select id="getAllQuestion" resultType="com.green.vrink.qna.dto.QuestionDTO">
        SELECT q_id,
               q.user_id,
               content,
               q.created_at,
               type,
               title,
               q.email,
               u.nickname,
               q.status
        FROM question q
                 LEFT JOIN user u ON q.user_id = u.user_id
        WHERE (status = #{classification2} OR #{classification2} NOT IN (0, 1))
    </select>

    <select id="getAllQuestionPaging" parameterType="com.green.vrink.admin.dto.PagingDto"
            resultType="com.green.vrink.qna.dto.QuestionDTO">
        SELECT q_id,
               q.user_id,
               content,
               q.created_at,
               type,
               title,
               q.email,
               u.nickname,
               q.status
        FROM question q
                 LEFT JOIN user u ON q.user_id = u.user_id
        WHERE (status = #{classification2} OR #{classification2} NOT IN (0, 1))
        ORDER BY q_id DESC
            LIMIT #{offset}, #{recordSize}
    </select>

    <select id="getAllQuestionByTypePaging" parameterType="com.green.vrink.admin.dto.PagingDto"
            resultType="com.green.vrink.qna.dto.QuestionDTO">
        SELECT q_id,
               q.user_id,
               content,
               q.created_at,
               type,
               title,
               q.email,
               u.nickname,
               q.status
        FROM question q
                 LEFT JOIN user u ON q.user_id = u.user_id
        WHERE (type = #{classification})
          AND (status = #{classification2} OR #{classification2} NOT IN (0, 1))
        ORDER BY q_id DESC
            LIMIT #{offset}, #{recordSize}
    </select>

    <select id="getAllQuestionByType" resultType="com.green.vrink.qna.dto.QuestionDTO">
        SELECT q_id,
               q.user_id,
               content,
               q.created_at,
               type,
               title,
               q.email,
               u.nickname,
               q.status
        FROM question q
                 LEFT JOIN user u ON q.user_id = u.user_id
        WHERE (type = #{classification})
          AND (status = #{classification2} OR #{classification2} NOT IN (0, 1))
        ORDER BY q_id DESC
    </select>

    <select id="questionTotalCount" resultType="int">
        SELECT count(*)
        FROM question
        WHERE (status = #{classification2} OR #{classification2} NOT IN (0, 1))
    </select>

    <select id="questionTotalCountClassification" resultType="int">
        SELECT count(*)
        FROM question
        WHERE (type = #{classification})
          AND (status = #{classification2} OR #{classification2} NOT IN (0, 1))
    </select>

    <select id="getQuestionById" resultType="com.green.vrink.qna.dto.QuestionDTO">
        SELECT q_id,
               q.user_id,
               content,
               q.created_at,
               type,
               title,
               q.email,
               u.nickname,
               q.status
        FROM question q
                 LEFT JOIN user u ON q.user_id = u.user_id
        WHERE q_id = #{id}
    </select>

    <select id="getAllUser" resultType="com.green.vrink.user.repository.model.User">
        SELECT *
        FROM user
        WHERE (enabled_check = #{classification2} OR #{classification2} NOT IN (0, 1))
          AND (level = #{classification3} OR #{classification3} NOT IN (0, 1))
    </select>

    <select id="getAllUserPaging" parameterType="com.green.vrink.admin.dto.PagingDto"
            resultType="com.green.vrink.user.repository.model.User">
        SELECT *
        FROM user
        WHERE (enabled_check = #{classification2} OR #{classification2} NOT IN (0, 1))
          AND (level = #{classification3} OR #{classification3} NOT IN (0, 1))
        ORDER BY user_id DESC
            LIMIT #{offset}, #{recordSize}
    </select>

    <select id="getAllUserByTypePaging" parameterType="com.green.vrink.admin.dto.PagingDto"
            resultType="com.green.vrink.user.repository.model.User">
        SELECT *
        FROM user
        WHERE (editor = #{classification})
          AND (enabled_check = #{classification2} OR #{classification2} NOT IN (0, 1))
          AND (level = #{classification3} OR #{classification3} NOT IN (0, 1))
        ORDER BY user_id DESC
            LIMIT #{offset}, #{recordSize}
    </select>

    <select id="getAllUserByType" resultType="com.green.vrink.user.repository.model.User">
        SELECT *
        FROM user
        WHERE (editor = #{classification})
          AND (enabled_check = #{classification2} OR #{classification2} NOT IN (0, 1))
          AND (level = #{classification3} OR #{classification3} NOT IN (0, 1))
        ORDER BY user_id DESC
    </select>

    <select id="userTotalCount" resultType="int">
        SELECT count(*)
        FROM user
        WHERE (enabled_check = #{classification2} OR #{classification2} NOT IN (0, 1))
          AND (level = #{classification3} OR #{classification3} NOT IN (0, 1))
    </select>

    <select id="userTotalCountClassification" resultType="int">
        SELECT count(*)
        FROM user
        WHERE (editor = #{classification})
          AND (enabled_check = #{classification2} OR #{classification2} NOT IN (0, 1))
          AND (level = #{classification3} OR #{classification3} NOT IN (0, 1))
    </select>

    <select id="getUserById" resultType="com.green.vrink.user.repository.model.User">
        SELECT *
        from user
        WHERE user_id = #{id}
    </select>

    <select id="getUserByNickname" resultType="com.green.vrink.user.repository.model.User">
        SELECT *
        from user
        WHERE nickname = #{nickname}
    </select>

    <select id="getAllAdList" resultType="com.green.vrink.admin.dto.AdminAdDto">
        SELECT *
        FROM ad
        WHERE (category = #{classification2} OR #{classification2} NOT IN (0, 1))
          AND (is_notice = #{classification3} OR #{classification3} NOT IN (0, 1))
    </select>

    <select id="getAllAdListByType" resultType="com.green.vrink.admin.dto.AdminAdDto">
        SELECT *
        FROM ad
        WHERE status = #{classification}
          AND (category = #{classification2} OR #{classification2} NOT IN (0, 1))
          AND (is_notice = #{classification3} OR #{classification3} NOT IN (0, 1))
        ORDER BY ad_id DESC
    </select>

    <select id="getAllAdListByPaging" resultType="com.green.vrink.admin.dto.AdminAdDto">
        SELECT *
        FROM ad
        WHERE (category = #{classification2} OR #{classification2} NOT IN (0, 1))
          AND (is_notice = #{classification3} OR #{classification3} NOT IN (0, 1))
        ORDER BY ad_id DESC
            LIMIT #{offset}, #{recordSize}
    </select>

    <select id="getAllAdListByTypePaging" resultType="com.green.vrink.admin.dto.AdminAdDto">
        SELECT *
        FROM ad
        WHERE status = #{classification}
          AND (category = #{classification2} OR #{classification2} NOT IN (0, 1))
          AND (is_notice = #{classification3} OR #{classification3} NOT IN (0, 1))
        ORDER BY ad_id DESC
            LIMIT #{offset}, #{recordSize}
    </select>

    <select id="countAllAd" resultType="integer">
        SELECT count(*)
        FROM ad
        WHERE (category = #{classification2} OR #{classification2} NOT IN (0, 1))
          AND (is_notice = #{classification3} OR #{classification3} NOT IN (0, 1))
    </select>

    <select id="countAdByType" resultType="integer">
        SELECT count(*)
        FROM ad
        WHERE status = #{classification}
          AND (category = #{classification2} OR #{classification2} NOT IN (0, 1))
          AND (is_notice = #{classification3} OR #{classification3} NOT IN (0, 1))
    </select>

    <update id="changeAd">
        UPDATE ad
        SET status = #{status}
        WHERE ad_id = #{adId}
    </update>

    <update id="changeAdPeriod">
        UPDATE ad
        SET ad_period = #{adPeriod}
        WHERE ad_id = #{adId}
    </update>

    <select id="getAdById" resultType="com.green.vrink.admin.dto.AdminAdDto">
        SELECT *
        from ad
        WHERE ad_id = #{id}
    </select>

    <update id="updateUserLevelById">
        UPDATE user
        SET level = #{level}
        WHERE user_id = #{userId}
    </update>

    <update id="updateUserEnabledCheckById">
        UPDATE user
        SET enabled_Check = #{enabledCheck}
        WHERE user_id = #{userId}
    </update>

    <update id="updateUserEditorById">
        UPDATE user
        SET editor            = 'editor',
            editor_created_at = now()
        WHERE user_id = #{userId}
    </update>

    <insert id="insertEditorDetailByUserId">
        INSERT INTO editor(user_id, thumbnail)
        VALUES (#{userId}, '/images/resource/default_image.gif')
    </insert>


    <select id="countEditorDetailByUserId" resultType="integer">
        SELECT count(*)
        FROM editor
        WHERE user_id = #{userId}
    </select>

    <select id="getDateCustomSevenDaysByTableNameValueWhen" resultType="com.green.vrink.admin.dto.DateCountDto">
        WITH DateRange AS (SELECT (CURDATE() - INTERVAL 6 DAY) + INTERVAL n DAY AS date
        FROM (
            SELECT 0 AS n UNION ALL
            SELECT 1 UNION ALL
            SELECT 2 UNION ALL
            SELECT 3 UNION ALL
            SELECT 4 UNION ALL
            SELECT 5 UNION ALL
            SELECT 6
            ) AS Numbers
            )

        SELECT DATE_FORMAT(DateRange.date, '%m-%d') AS date, IFNULL(count, 0) AS count
        FROM DateRange
            LEFT JOIN (
            SELECT DATE (${when}) AS date, ${value} AS count
            FROM ${tableName}
            WHERE ${when} >= CURDATE() - INTERVAL 7 DAY
            GROUP BY DATE (${when})
            ) AS Data
        ON DATE (DateRange.date) = Data.date
    </select>

    <select id="getDateCustomWeekByTableNameValueWhen" resultType="com.green.vrink.admin.dto.DateCountDto">
        <![CDATA[
        WITH Weeks AS (SELECT 0 AS week
                       UNION
                       SELECT 1
                       UNION
                       SELECT 2
                       UNION
                       SELECT 3
                       UNION
                       SELECT 4
                       UNION
                       SELECT 5
                       UNION
                       SELECT 6
                       UNION
                       SELECT 7
                       UNION
                       SELECT 8
                       UNION
                       SELECT 9
                       UNION
                       SELECT 10
                       UNION
                       SELECT 11)

        SELECT DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL week WEEK), '%m-%d') AS date,
    IFNULL(SUM(IFNULL(count, 0)), 0) AS count
        FROM Weeks
            LEFT JOIN (
            SELECT DATE_FORMAT(${when}, '%Y-%u') AS date, ${value} AS count
            FROM ${tableName}
            WHERE ${when} >= DATE_SUB(CURDATE(), INTERVAL 11 WEEK)
            AND ${when} <= CURDATE()
            GROUP BY DATE_FORMAT(${when}, '%Y-%u')
            ) AS Data
        ON DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL week WEEK), '%Y-%u') = Data.date
        GROUP BY DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL week WEEK), '%m-%d')
        ORDER BY DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL week WEEK), '%m-%d')
        ]]>
    </select>

    <select id="getDateCustomMonthByTableNameValueWhen" resultType="com.green.vrink.admin.dto.DateCountDto">
        <![CDATA[
        WITH RECURSIVE DateRange
                           AS (SELECT DATE_ADD(LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 11 MONTH)), INTERVAL 1 DAY) AS start_date,
                                      LAST_DAY(CURDATE())                                                        AS end_date
                               UNION ALL
                               SELECT DATE_ADD(start_date, INTERVAL 1 MONTH)           AS start_date,
                                      LAST_DAY(DATE_ADD(start_date, INTERVAL 1 MONTH)) AS end_date
                               FROM DateRange
                               WHERE start_date < LAST_DAY(CURDATE()))

        SELECT DATE_FORMAT(start_date, '%Y-%m') AS date,
        IFNULL(SUM(count), 0) AS count
        FROM DateRange
            LEFT JOIN (
            SELECT DATE_FORMAT(${when}, '%Y-%m') AS date, ${value} AS count
            FROM ${tableName}
            WHERE ${when} >= DATE_ADD(LAST_DAY(CURDATE()), INTERVAL 1 DAY) - INTERVAL 12 MONTH
            AND ${when} < DATE_ADD(LAST_DAY(CURDATE()), INTERVAL 1 DAY)
            GROUP BY DATE_FORMAT(${when}, '%Y-%m')
            ) AS Data
        ON DATE_FORMAT(start_date, '%Y-%m') = Data.date
        GROUP BY DATE_FORMAT(start_date, '%Y-%m')
        ]]>
    </select>

    <select id="countStandardUser" resultType="integer">
        SELECT count(*)
        FROM user
        WHERE editor = 'standard'
          AND enabled_check = 0
    </select>

    <select id="countEditorUser" resultType="integer">
        SELECT count(*)
        FROM user
        WHERE editor = 'editor'
          AND enabled_check = 0
    </select>

    <select id="countEnabledUser" resultType="integer">
        SELECT count(*)
        FROM user
        WHERE enabled_check = 1
    </select>

    <insert id="insertAd">
        INSERT INTO ad(ad_com_name, main_image, hhhh_image, vvvv_image, price, ad_period, category, is_notice)
        VALUES (#{adComName}, #{mainImage}, #{hhhhImage}, #{vvvvImage}, #{price}, #{adPeriod}, #{category}, #{isNotice})
    </insert>

    <select id="getAllAdminPaymentList" resultType="com.green.vrink.admin.dto.AdminPaymentDto">
        SELECT
            payment.*,
            customer.nickname AS customerNickname,
            editor.nickname AS editorNickname,
            ps.state,
            ps.payment_state_id
        FROM payment
                 LEFT JOIN user AS customer ON payment.user_id = customer.user_id
                 LEFT JOIN editor AS e ON payment.editor_id = e.editor_id
                 LEFT JOIN user AS editor ON e.user_id = editor.user_id
                 LEFT JOIN payment_state AS ps ON payment.payment_id = ps.payment_id
        WHERE
                (ps.payment_state_id, ps.payment_id) IN (
                SELECT MAX(payment_state_id) AS max_payment_state_id, payment_id
                FROM payment_state
                GROUP BY payment_id
            )
        ORDER BY ps.payment_state_id DESC
    </select>

    <select id="getAllAdminPaymentListByType" parameterType="com.green.vrink.admin.dto.PagingDto"
            resultType="com.green.vrink.admin.dto.AdminPaymentDto">
        SELECT
            payment.*,
            customer.nickname AS customerNickname,
            editor.nickname AS editorNickname,
            ps.state,
            ps.payment_state_id
        FROM payment
                 LEFT JOIN user AS customer ON payment.user_id = customer.user_id
                 LEFT JOIN editor AS e ON payment.editor_id = e.editor_id
                 LEFT JOIN user AS editor ON e.user_id = editor.user_id
                 LEFT JOIN payment_state AS ps ON payment.payment_id = ps.payment_id
        WHERE
                (ps.payment_state_id, ps.payment_id) IN (
                SELECT MAX(payment_state_id) AS max_payment_state_id, payment_id
                FROM payment_state
                GROUP BY payment_id
            ) AND state = #{classification}
        ORDER BY ps.payment_state_id DESC
    </select>

    <select id="getAllAdminPaymentListByPaging" parameterType="com.green.vrink.admin.dto.PagingDto"
            resultType="com.green.vrink.admin.dto.AdminPaymentDto">
        SELECT
            payment.*,
            customer.nickname AS customerNickname,
            editor.nickname AS editorNickname,
            ps.state,
            ps.payment_state_id
        FROM payment
                 LEFT JOIN user AS customer ON payment.user_id = customer.user_id
                 LEFT JOIN editor AS e ON payment.editor_id = e.editor_id
                 LEFT JOIN user AS editor ON e.user_id = editor.user_id
                 LEFT JOIN payment_state AS ps ON payment.payment_id = ps.payment_id
        WHERE
                (ps.payment_state_id, ps.payment_id) IN (
                SELECT MAX(payment_state_id) AS max_payment_state_id, payment_id
                FROM payment_state
                GROUP BY payment_id
            )
        ORDER BY ps.payment_state_id DESC
        LIMIT #{offset}, #{recordSize}
    </select>

    <select id="getAllAdminPaymentListByTypePaging" parameterType="com.green.vrink.admin.dto.PagingDto"
            resultType="com.green.vrink.admin.dto.AdminPaymentDto">
        SELECT
            payment.*,
            customer.nickname AS customerNickname,
            editor.nickname AS editorNickname,
            ps.state,
            ps.payment_state_id
        FROM payment
                 LEFT JOIN user AS customer ON payment.user_id = customer.user_id
                 LEFT JOIN editor AS e ON payment.editor_id = e.editor_id
                 LEFT JOIN user AS editor ON e.user_id = editor.user_id
                 LEFT JOIN payment_state AS ps ON payment.payment_id = ps.payment_id
        WHERE
                (ps.payment_state_id, ps.payment_id) IN (
                SELECT MAX(payment_state_id) AS max_payment_state_id, payment_id
                FROM payment_state
                GROUP BY payment_id
            ) AND state = #{classification}
        ORDER BY ps.payment_state_id DESC
            LIMIT #{offset}, #{recordSize}
    </select>

    <select id="countAllAdminPayment" resultType="integer">
        SELECT count(*)
        FROM payment
    </select>

    <select id="countAdminPaymentByType" resultType="integer">
        SELECT count(*)
        FROM payment
        LEFT JOIN payment_state as ps ON payment.payment_id = ps.payment_id
        WHERE state = #{classification}
    </select>

    <select id="getAdminPaymentDetailsById" resultType="com.green.vrink.admin.dto.AdminPaymentDetailDto">
        SELECT *
        FROM payment_detail
        WHERE payment_id = #{id}
    </select>

    <select id="getAdminPaymentStatesById" resultType="com.green.vrink.admin.dto.AdminPaymentStateDto">
        SELECT state, created_at
        FROM payment_state
        WHERE payment_id = #{id}
    </select>

    <select id="getAdminPaymentDtoById" resultType="com.green.vrink.admin.dto.AdminPaymentDto">
        SELECT
            payment.*,
            customer.nickname AS customerNickname,
            editor.nickname AS editorNickname
        FROM payment
            LEFT JOIN user AS customer ON payment.user_id = customer.user_id
            LEFT JOIN editor AS e ON payment.editor_id = e.editor_id
            LEFT JOIN user AS editor ON e.user_id = editor.user_id
        WHERE payment_id = #{id}
    </select>



    <select id="getAllAdminCalculatorList" resultType="com.green.vrink.admin.dto.AdminCalculatorDto">
        SELECT
            c.cal_id, c.editor_id, e.nickname AS nickname, SUM(c.cal_price) AS total_price, SUM(c.real_cal_price) AS total_real_price, FLOOR(SUM(c.cal_price) * 0.05) AS total_charge, c.cal_status, c.created_at, c.complete_date
        FROM calculator AS c
            LEFT JOIN editor AS ed ON c.editor_id = ed.editor_id
            LEFT JOIN user AS e ON ed.user_id = e.user_id
        GROUP BY c.editor_id, c.cal_status
        ORDER BY c.cal_id DESC
    </select>

    <select id="getAllAdminCalculatorListByType" parameterType="com.green.vrink.admin.dto.PagingDto"
            resultType="com.green.vrink.admin.dto.AdminCalculatorDto">
        SELECT
            c.cal_id, c.editor_id, e.nickname AS nickname, SUM(c.cal_price) AS total_price, SUM(c.real_cal_price) AS total_real_price, FLOOR(SUM(c.cal_price) * 0.05) AS total_charge, c.cal_status, c.created_at, c.complete_date
        FROM calculator AS c
                 LEFT JOIN editor AS ed ON c.editor_id = ed.editor_id
                 LEFT JOIN user AS e ON ed.user_id = e.user_id
        WHERE c.cal_status = #{classification}
        GROUP BY c.editor_id, c.cal_status
        ORDER BY c.cal_id DESC
    </select>

    <select id="getAllAdminCalculatorListByPaging" parameterType="com.green.vrink.admin.dto.PagingDto"
            resultType="com.green.vrink.admin.dto.AdminCalculatorDto">
        SELECT
            c.cal_id, c.editor_id, e.nickname AS nickname, SUM(c.cal_price) AS total_price, SUM(c.real_cal_price) AS total_real_price, FLOOR(SUM(c.cal_price) * 0.05) AS total_charge, c.cal_status, c.created_at, c.complete_date
        FROM calculator AS c
                 LEFT JOIN editor AS ed ON c.editor_id = ed.editor_id
                 LEFT JOIN user AS e ON ed.user_id = e.user_id
        GROUP BY c.editor_id, c.cal_status
        ORDER BY c.cal_id DESC
        LIMIT #{offset}, #{recordSize}
    </select>

    <select id="getAllAdminCalculatorListByTypePaging" parameterType="com.green.vrink.admin.dto.PagingDto"
            resultType="com.green.vrink.admin.dto.AdminCalculatorDto">
        SELECT
            c.cal_id, c.editor_id, e.nickname AS nickname, SUM(c.cal_price) AS total_price, SUM(c.real_cal_price) AS total_real_price, FLOOR(SUM(c.cal_price) * 0.05) AS total_charge, c.cal_status, c.created_at, c.complete_date
        FROM calculator AS c
                 LEFT JOIN editor AS ed ON c.editor_id = ed.editor_id
                 LEFT JOIN user AS e ON ed.user_id = e.user_id
        WHERE c.cal_status = #{classification}
        GROUP BY c.editor_id, c.cal_status
        ORDER BY c.cal_id DESC
        LIMIT #{offset}, #{recordSize}
    </select>

    <select id="countAllAdminCalculator" resultType="integer">
        SELECT count(*)
        FROM (
                 SELECT editor_id, cal_status
                 FROM calculator
                 GROUP BY editor_id, cal_status
             ) SUBQUERY
    </select>

    <select id="countAdminCalculatorByType" resultType="integer">
        SELECT count(*)
        FROM (
                 SELECT editor_id, cal_status
                 FROM calculator
                 WHERE cal_status = #{classification}
                 GROUP BY editor_id, cal_status
             ) SUBQUERY
    </select>

    <select id="getAdminCalculatorDetailOkListByEditorId" resultType="com.green.vrink.admin.dto.AdminCalculatorDto">
        SELECT
            c.cal_id, c.editor_id, c.cal_price, c.real_cal_price, c.cal_price-c.real_cal_price AS charge,
            e.nickname AS nickname, c.cal_status, c.created_at, c.complete_date,
            (SELECT SUM(cal_price) FROM calculator WHERE editor_id = #{id} AND cal_status = 0) AS total_price,
            FLOOR((SELECT SUM(cal_price) FROM calculator WHERE editor_id = #{id} AND cal_status = 0)*0.95) AS total_real_price,
            FLOOR((SELECT SUM(cal_price) FROM calculator WHERE editor_id = #{id} AND cal_status = 0)*0.05) AS total_charge
        FROM calculator AS c
                 LEFT JOIN editor AS ed ON c.editor_id = ed.editor_id
                 LEFT JOIN user AS e ON ed.user_id = e.user_id
        WHERE c.editor_id = #{id} AND c.cal_status = 0
        ORDER BY c.cal_id DESC
    </select>

    <select id="getAdminCalculatorDetailNoListByEditorId" resultType="com.green.vrink.admin.dto.AdminCalculatorDto">
        SELECT
            c.cal_id, c.editor_id, c.cal_price, c.real_cal_price, c.cal_price-c.real_cal_price AS charge,
            e.nickname AS nickname, c.cal_status, c.created_at, c.complete_date,
            (SELECT SUM(cal_price) FROM calculator WHERE editor_id = #{id} AND cal_status = 1) AS total_price,
            FLOOR((SELECT SUM(cal_price) FROM calculator WHERE editor_id = #{id} AND cal_status = 1)*0.95) AS total_real_price,
            FLOOR((SELECT SUM(cal_price) FROM calculator WHERE editor_id = #{id} AND cal_status = 1)*0.05) AS total_charge
        FROM calculator AS c
                 LEFT JOIN editor AS ed ON c.editor_id = ed.editor_id
                 LEFT JOIN user AS e ON ed.user_id = e.user_id
        WHERE c.editor_id = #{id} AND c.cal_status = 1
        ORDER BY c.cal_id DESC
    </select>


    <select id="countAllNotice" resultType="integer">
        SELECT count(*)
        FROM notice
        WHERE type = COALESCE(#{classification}, type)
    </select>

    <select id="getNoticeById" resultType="com.green.vrink.notice.dto.NoticeDto">
        SELECT *
        FROM notice
        WHERE notice_id = #{id}
    </select>

    <select id="getAllNoticeList" resultType="com.green.vrink.notice.dto.NoticeDto">
        SELECT *
        FROM notice
        WHERE type = COALESCE(#{classification}, type)
        ORDER BY notice_id DESC
    </select>

    <select id="getAllNoticeListByPaging" resultType="com.green.vrink.notice.dto.NoticeDto">
        SELECT *
        FROM notice
        WHERE type = COALESCE(#{classification}, type)
        ORDER BY notice_id DESC
        LIMIT #{offset}, #{recordSize}
    </select>

    <delete id="deleteNoticeById">
        DELETE FROM notice
        WHERE notice_id = #{id}
    </delete>

    <insert id="insertNotice">
        INSERT INTO notice(title, content, type)
        VALUES (#{title}, #{content}, #{type})
    </insert>

    <update id="updateNotice">
        UPDATE notice
        SET title = #{title},
            content = #{content},
            type = #{type}
        WHERE notice_id = #{noticeId}
    </update>

    <update id="updateCalStatusByEditorId">
        UPDATE calculator
        SET cal_status = 1, complete_date = now(), real_cal_price = cal_price * 0.95
        WHERE editor_id = #{editorId}
    </update>

</mapper>